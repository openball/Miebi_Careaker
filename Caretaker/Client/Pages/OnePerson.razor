@page "/OnePerson"
@page "/OnePerson/{id:int}"
@inject IPersonService PersonService
@inject NavigationManager navigationManager

<h3>Person</h3>
@if (Id == null)
{
    <PageTitle>Create a new Person</PageTitle>
    <h3>Create a new Person</h3>
}
else
{
     <PageTitle>Edit @person.Firstname</PageTitle>
     <h3>Edit @person.Firstname</h3>

}

<EditForm Model="person" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="person.Firstname" class="form-control"></InputText>
    </div>
    <div>
        <label for="middlename">Middle Name</label>
        <InputText id="middlename" @bind-Value="person.Middlename" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="person.Lastname" class="form-control"></InputText>
    </div>
    <div>
        <label>Gender</label><br/>
        <InputSelect @bind-Value="person.GenderId" class="form-select">
            @foreach (var gender in PersonService.genders)
            {
                <option value="@gender.GenderId">@gender.GenderType</option>
            }
        </InputSelect>
    </div>
     <div>
        <label for="mobile">Mobile No.:</label>
        <InputText id="mobile" @bind-Value="person.Mobile" class="form-control"></InputText>
    </div>
    @* <div>
        <label for="address">Address</label>
        <InputText id="address" @bind-Value="person.Address" class="form-control"></InputText>
    </div>*@
     <div>
        <label for="emailaddress">Email Address</label>
        <InputText id="emailaddress" @bind-Value="person.EmailAddress" class="form-control"></InputText>
    </div>
    <div>
        <label>Category</label><br/>
        <InputSelect @bind-Value="person.PersonCategoryId" class="form-select">
            @foreach (var personcategory in PersonService.personcategories)
            {
                <option value="@personcategory.PersonCategoryId">@personcategory.CategoryDesc</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="status">
            Status:
            <InputCheckbox id="status" @bind-Value="person.Active"></InputCheckbox>
        </label>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeletePerson">Delete Person</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Person person = new Person { Gender = new Gender(), PersonCategory = new PersonCategory() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Person" : "Update Person";
        await PersonService.GetGenders();
        await PersonService.GetPersonCategories();
        await PersonService.GetPeople();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            person.Gender = PersonService.genders[0];
            person.PersonCategory = PersonService.personcategories[0];
            person.GenderId = person.GenderId;
            person.PersonCategoryId = person.PersonCategory.PersonCategoryId;
        }
        else
        {
            person = await PersonService.GetSinglePerson((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            
            await PersonService.CreatePerson(person);
        }
        else
        {
            await PersonService.UpdatePerson(person);
        }
        navigationManager.NavigateTo("People");
    }

    async Task DeletePerson()
    {
        await PersonService.DeletePerson(person.PersonId);
        navigationManager.NavigateTo("People");
    }
}
